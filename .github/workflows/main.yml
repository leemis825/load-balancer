name: 빌드 및 배포 

on:
  push:
    branches: [ main ]

env:
  USERNAME: moon8sun 
# 변수 명 = 값 
# properties -> java에서 많이 사용되는 변수 설정
# env
# ini

# node1.group1.변수명1 =값1
# node1.group1.변수명2 =값2
# node1.group1.변수명3 =값3
# node1.group2.변수명1 =값1
# node1.group2.변수명2 =값2
# node1.group2.변수명3 =값3

# node2.group1.변수명1 =값1
# node2.group1.변수명2 =값2
# node2.group1.변수명3 =값3
# node2.group2.변수명1 =값1
# node2.group2.변수명2 =값2
# node2.group2.변수명3 =값3

# 이렇게 작성하면 가독성이 떨어진다. 
# 때문에 레벨로 구분하는 것이 좋다. 
# node1:
#   group1:
#     변수명1: 값1
#     변수명2: 값2
#     변수명3: 값3

#   group2:
#     변수명1: 값1
#     변수명2: 값2
#     변수명3: 값3

jobs:
  build-docker-image:
    runs-on: ubuntu-latest
    steps:
      - name: 원격저장소에서 소스를 복사
        uses: actions/checkout@v3

      - name: 소스 파일을 docker이미지로 빌드한다
        run: docker build -t ${{ env.USERNAME }}/my-fastapi-whoami:latest .

      - name: docker hub에 로그인 한다. 
        run: docker login -u ${{ env.USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
      
      - name: 생성된 이미지를 docker hub에 푸시한다
        run: docker push ${{ env.USERNAME }}/my-fastapi-whoami:latest

  deploy:
    needs: build-docker-image
    name: deploy
    runs-on: [ self-hosted, label-kosa ]
    steps:
      - name: 기존에 실행중인 서비스를 제거한다. 
        run: docker service rm my-fastapi-whoami-app

      - name: docker hub에 로그인 한다. 
        run: docker login -u ${{ env.USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
      
      - name: 생성된 이미지를 docker hub에 pull로 내려 받는다
        run: docker pull ${{ env.USERNAME }}/my-fastapi-whoami:latest

      - name: 서비스 실행
        run: |
          docker service create \
          --name my-fastapi-whoami-app \
          --publish published=8000,target=8000 \
          --replicas 3 \
          ${{ env.USERNAME }}/my-fastapi-whoami
